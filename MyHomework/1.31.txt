35:
class Solution {
    public int searchInsert(int[] nums, int target) {
        for(int i =0; i < nums.length; i ++){
            if(target == nums[i] ||target <nums[i] ) return i;                        
        }
        return nums.length;
    }
}

64:
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];
        for(int i =0; i < m; i++){
            for(int j =0; j <n; j ++){
                if(i==0&&j==0){
                    continue;
                }else if(i==0 && j != 0){
                    dp[i][j] = dp[i][j-1] + grid[i][j];
                }else if(i!=0 && j==0){
                    dp[i][j] = dp[i-1][j] + grid[i][j];
                }else{
                    dp[i][j] = Math.min(dp[i][j-1],dp[i-1][j]) + grid[i][j];
                }

            }

        }
        return dp[m-1][n-1];
    }
}

73ï¼š
class Solution {
    public void setZeroes(int[][] matrix) {
        Set<Integer> izero = new HashSet<Integer>();
        Set<Integer> jzero = new HashSet<Integer>();
        for(int i =0; i <matrix.length; i ++){
            for(int j=0; j < matrix[0].length; j ++){
                if(matrix[i][j]==0){
                    izero.add(i);
                    jzero.add(j);
                }
                  
            }
        }
        for(int i =0; i <matrix.length; i ++){
            for(int j=0; j < matrix[0].length; j ++){
                if(izero.contains(i) || jzero.contains(j)){
                    matrix[i][j] = 0;

                }
            }
        }
    }
}