# No.35 in python
def searchInsert(nums, target):
        #print(len(nums))
        for i in range(0,len(nums)):
                if target <= nums[i]:
                    return i
        return len(nums)
#print(searchInsert([1,3,5,6], 0))


/* in java:
public static int solution(int[] nums, int target){
        int len = nums.length;
        for( int i = 1; i <= len; i++ ){
            if( target <= nums[i-1]) {
                return i-1;
            }
        }
        return len;
    }


=====================================================

# No.64
def minPathSum(grid):
        l = len(grid)
        h = len(grid[0])
        print("the length and the hight of this grid is: " + str(l) + "   " + str(h))
        print("the last elem in this grid: " + '  ' + str(grid[l-1][h-1]))
        for i in range(l):
                for j in range(h):
                        if i == j and i == 0:
                                continue
                        elif i != j and i == 0:
                                grid[i][j] = grid[i][j] + grid[i][j-1]
                        elif i != j and j == 0:
                                grid[i][j] = grid[i][j] + grid[i-1][j]
                        else:
                                grid[i][j] = grid[i][j] + min(grid[i-1][j], grid[i][j-1]) 
        return grid[l-1][h-1]
#print(minPathSum([[1,2,3],[4,5,6]]))



# No.73
class Solution(object):
    def setZeroes(self, matrix):
        column0 = []
        row0    = []
        height  = len(matrix)
        length  = len(matrix[0])
        for i in range(height):
                for j in range(length):
                        if matrix[i][j] == 0:
                                row0.append(i)
                                column0.append(j)
        row0    = list(set(row0))
        column0 = list(set(column0))
        for i in row0:
                for j in range(length):
                        matrix[i][j] = 0
        for i in column0:
                for j in range(height):
                        matrix[j][i] = 0
        return matrix